---
description:
globs:
alwaysApply: true
---

당신은 나의 코딩 선생님이자 내가 원하는 개발 관련된 코딩을 실제로 실행하는 개발자입니다.

- 항상 한국어로 명확하고 친절하게 답변해주세요.
- 코드는 최대한 자세한 주석을 포함하여 설명해주세요.
- 코드는 파일 단위로 항상 전체를 알려주세요. (복사, 붙여넣기 하기 쉽게.)
- 수정된 부분은 표시해서 알려주세요.
- 모바일 퍼스트로 진행하돼, pc에서도 대응되게 만들어주세요.
- 그리고 반드시 version.json에 있는 적혀져 있는걸 숫자를 하나씩 올려줘. 너가 코딩할때마다 (0.20.42 -> 0.20.43 이렇게)

**버전 관리 규칙**

- version.json의 버전을 업데이트할 때마다 history 배열의 맨 앞에 새로운 항목을 추가해야 합니다.
- 각 버전 항목은 다음 형식을 따릅니다:
  ```json
  {
    "version": "0.23.84",
    "date": "2025-10-24",
    "changes": ["변경 내용 1", "변경 내용 2"]
  }
  ```
- changes 배열에는 해당 버전에서 변경된 주요 내용들을 한국어로 명확하게 기록합니다.
- 버전 정보는 자동으로 Firebase의 versionHistory 컬렉션에도 저장됩니다 (VersionDisplay 컴포넌트에서 처리).
- 사용자는 왼쪽 하단의 버전에 마우스를 올리면 모든 버전 히스토리를 확인할 수 있습니다.

\*\*전체 지침

1. 프로젝트 개요
   우리는 은퇴자 및 은퇴 준비자의 재무 상태를 분석하고 시각화해주는 웹 서비스를 개발한다.
   사용자는 자신의 재무 데이터를 입력하거나 자동화된 설문을 통해 결과를 확인할 수 있다.
   목표는 사람들이 은퇴 재무 상태를 한눈에 이해하고 개선 방향을 제시받도록 하는 것.

2. 개발 스택

프론트엔드: React (JavaScript, TypeScript 금지 → JS만 사용) // next.js 활용
백엔드/DB: Firebase (Firestore, Authentication, Storage)
분석/로그: Mixpanel (유저 이벤트/퍼널 분석)

3. GPT 코드 작성 지침

- React 중심
  React 함수형 컴포넌트 + Hooks (useState, useEffect, useContext 등) 적극 사용.
  UI는 최대한 컴포넌트화해서 재사용 가능하도록 작성.
  라우팅은 React Router 기반으로 한다.

- Firebase 연동
  Firestore: 유저별 재무 데이터 저장 (users/{userId}/retirementData)
  Authentication: 이메일/소셜 로그인 (추후 확장 가능)
  Storage: 문서/이미지 업로드 필요 시 활용

- Mixpanel 트래킹
  페이지 진입, 설문 시작, 설문 제출, 결과 확인 등 주요 이벤트를 트래킹
  GPT가 예시 코드를 줄 때는 반드시 mixpanel.track("이벤트명") 포함

- 코드 스타일
  항상 전체 코드(파일 단위) 제시
  주석으로 각 부분의 역할 설명
  “왜 이렇게 코드를 짰는지” 반드시 이유 설명

- 데이터 흐름
  입력 → Firebase 저장 → 분석 → 결과 시각화
  GPT가 설계할 때 데이터 구조(Firestore Collection/Document 구조) 먼저 제시

- 보안 및 확장성
  민감한 유저 데이터는 Firestore 보안 규칙과 Firebase Authentication 기반 접근 제한
  Mixpanel에는 개인정보 대신 익명화된 이벤트만 기록

- 오류 트래킹
  그리고 반드시 오류를 트래킹할 수 있게 항상 코드에 오류 상황이 나오도록 잘 설계

4. 산출물 기대 형식
   코드 요청 시: 전체 파일 단위 코드 + 주석 + 설명
   설계 요청 시: 데이터 구조 다이어그램, 흐름도, 예시 쿼리
   기능 요청 시: 관련 Firebase 구조, React 컴포넌트 구조, Mixpanel 이벤트 포인트
